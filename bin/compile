#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

# START CONFIG
NGINX_VERSION=1.5.2
LIBICU_VERSION=50.1.2
LIBMCRYPT_VERSION=2.5.8
LIBMEMCACHED_VERSION=1.0.7
PHP_VERSION=5.4.20
NEWRELIC_VERSION=4.0.5.18
NODE_VERSION=0.10.17
NPM_VERSION=1.3.9
SUPERVISORD_VERSION=3.0
SETUPTOOLS_VERSION=1.1
PHING_VERSION=2.6.1
S3_BUCKET=feelgood-heroku-buildpack
# END CONFIG

#
S3_URL="https://${S3_BUCKET}.s3.amazonaws.com"

MANIFEST_FILE="manifest.md5sum"
NGINX_FILE="nginx-${NGINX_VERSION}-heroku.tar.gz"
MCRYPT_FILE="libmcrypt-${LIBMCRYPT_VERSION}.tar.gz"
MEMCACHED_FILE="libmemcached-${LIBMEMCACHED_VERSION}.tar.gz"
ICU_FILE="libicu-${LIBICU_VERSION}.tar.gz"
PHP_FILE="php-${PHP_VERSION}-with-fpm-heroku.tar.gz"
NEWRELIC_FILE="newrelic-${NEWRELIC_VERSION}-heroku.tar.gz"
NODE_FILE="node-${NODE_VERSION}-heroku.tar.gz"
NPM_FILE="npm-${NPM_VERSION}.tar.gz"
SUPERVISORD_FILE="supervisor-${SUPERVISORD_VERSION}.tar.gz"
PHING_FILE="phing-${PHING_VERSION}.tar.gz"
SETUPTOOLS_FILE="setuptools-${SETUPTOOLS_VERSION}.tar.gz"

MANIFEST_URL="${S3_URL}/${MANIFEST_FILE}"
NGINX_URL="${S3_URL}/${NGINX_FILE}"
MCRYPT_URL="${S3_URL}/${MCRYPT_FILE}"
MEMCACHED_URL="${S3_URL}/${MEMCACHED_FILE}"
ICU_URL="${S3_URL}/${ICU_FILE}"
PHP_URL="${S3_URL}/${PHP_FILE}"
NEWRELIC_URL="${S3_URL}/${NEWRELIC_FILE}"
NODE_URL="${S3_URL}/${NODE_FILE}"
NPM_URL="${S3_URL}/${NPM_FILE}"
SUPERVISORD_URL="${S3_URL}/${SUPERVISORD_FILE}"
PHING_URL="${S3_URL}/${PHING_FILE}"
SETUPTOOLS_URL="${S3_URL}/${SETUPTOOLS_FILE}"
COMPOSER_URL="http://getcomposer.org/composer.phar"
#

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function check_md5() {
	SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
	TARGET="$1"
	SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
	OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
	! [ "$SUM" = "$OUTPUT" ]
}

function download_url() {
	TARGET_URL="$1"
	curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}

# package params: name tarball version url build_dir target
function install {
    echo "-----> Installing ${1} v${3}"
    if [ -f $2 ]
    then
            # check manifest
            if check_md5 $2
            then
                    echo "Bundling ${1} v${3}" | indent
                    echo ${4} | indent
                    download_url ${4}
            else
                    echo "Using cached ${1} v${3}" | indent
            fi
    else
            # fetch
            echo "Bundling ${1} v${3}" | indent
            echo $4 | indent
            download_url $4
    fi
    
    if [ ! -d $5 ]; then
        mkdir -p $5
    fi
    
    tar xzf $2 -C $5
}

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
BUNDLE_DIR="${CACHE_DIR}/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`

#Paths
PHP_PATH="vendor/php"
PHING_PATH="vendor/phing"
NODE_PATH="vendor/node"
NPM_PATH="$(mktmpdir npm)"
SUPERVISORD_PATH="vendor/supervisord"
SETUPTOOLS_PATH="vendor/setuptools"

export COMPOSER_HOME="${CACHE_DIR}/.composer"

function run_npm() {
  command="$1"

  cd $BUILD_DIR/app/assets
  HOME="$BUILD_DIR/app/assets" $BUILD_DIR/$NODE_PATH/bin/node $NPM_PATH/cli.js config set cache ${CACHE_DIR}/npm 2>&1 | indent
  HOME="$BUILD_DIR/app/assets" $BUILD_DIR/$NODE_PATH/bin/node $NPM_PATH/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}


# include .files when moving things around
shopt -s dotglob

mkdir -p $BUILD_DIR $CACHE_DIR ${BUNDLE_DIR} ${BUILD_DIR}/local ${BUILD_DIR}/vendor/bin ${COMPOSER_HOME} ${BUILD_DIR}/.profile.d

pushd ${BUNDLE_DIR} > /dev/null

if [ -n "`find . -type f -atime +30`" ]
then
	echo "-----> Pruning Unused Cached Bundles"
	find . -type f -atime +30 -delete | indent
fi

echo "-----> Fetching Manifest"
echo ${MANIFEST_URL} | indent
download_url ${MANIFEST_URL}

# Nginx
echo "-----> Installing Nginx"
if [ -f "${NGINX_FILE}" ]
then
	# check manifest
	if check_md5 "${NGINX_FILE}"
	then
		echo "Bundling Nginx v${NGINX_VERSION}" | indent
		echo ${NGINX_URL} | indent
		download_url ${NGINX_URL}
	else
		echo "Using cached Nginx v${NGINX_VERSION}" | indent
	fi
else
	# fetch
	echo "Bundling Nginx v${NGINX_VERSION}" | indent
	echo ${NGINX_URL} | indent
	download_url ${NGINX_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/nginx
tar xzf ${NGINX_FILE} -C ${BUILD_DIR}/vendor/nginx

# libmcrypt
echo "-----> Installing libmcrypt"
if [ -f "${MCRYPT_FILE}" ]
then
	if check_md5 "${MCRYPT_FILE}"
	then
		echo "Bundling libmcrypt v${LIBMCRYPT_VERSION}" | indent
		echo ${MCRYPT_URL} | indent
		download_url ${MCRYPT_URL}
	else
		echo "Using cached libmcrypt v${LIBMCRYPT_VERSION}" | indent
	fi
else
	echo "Bundling libmcrypt v${LIBMCRYPT_VERSION}" | indent
	echo ${MCRYPT_URL} | indent
	download_url ${MCRYPT_URL}
fi

tar xzf ${MCRYPT_FILE} -C ${BUILD_DIR}/local

# libmemcached
echo "-----> Installing libmemcached"
if [ -f "${MEMCACHED_FILE}" ]
then
	if check_md5 "${MEMCACHED_FILE}"
	then
		echo "Bundling libmemcached v${LIBMEMCACHED_VERSION}" | indent
		echo ${MEMCACHED_URL} | indent
		download_url ${MEMCACHED_URL}
	else
		echo "Using cached libmemcached v${LIBMEMCACHED_VERSION}" | indent
	fi
else
	echo "Bundling libmemcached v${LIBMEMCACHED_VERSION}" | indent
	echo ${MEMCACHED_URL} | indent
	download_url ${MEMCACHED_URL}
fi

tar xzf ${MEMCACHED_FILE} -C ${BUILD_DIR}/local

# libicu
echo "-----> Installing libicu"
if [ -f "${ICU_FILE}" ]
then
	if check_md5 "${ICU_FILE}"
	then
		echo "Bundling libicu v${LIBICU_VERSION}" | indent
		echo ${ICU_URL} | indent
		download_url ${ICU_URL}
	else
		echo "Using cached libicu v${LIBICU_VERSION}" | indent
	fi
else
	echo "Bundling libicu v${LIBICU_VERSION}" | indent
	echo ${ICU_URL} | indent
	download_url ${ICU_URL}
fi

tar xzf ${ICU_FILE} -C ${BUILD_DIR}/local

# PHP
echo "-----> Installing PHP"
if [ -f "$PHP_FILE" ]
then
	if check_md5 "${PHP_FILE}"
	then
		echo "Bundling PHP v${PHP_VERSION}" | indent
		echo ${PHP_URL} | indent
		download_url ${PHP_URL}
	else
		echo "Using cached PHP v${PHP_VERSION}" | indent
	fi
else
	echo "Bundling PHP v${PHP_VERSION}" | indent
	echo ${PHP_URL} | indent
	download_url ${PHP_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/php
tar xzf ${PHP_FILE} -C ${BUILD_DIR}/vendor/php

# newrelic
echo "-----> Installing newrelic"
if [ -f "${NEWRELIC_FILE}" ]
then
	if check_md5 "${NEWRELIC_FILE}"
	then
		echo "Bundling newrelic daemon v${NEWRELIC_VERSION}" | indent
		echo ${NEWRELIC_URL} | indent
		download_url ${NEWRELIC_URL}
	else
		echo "Using cached newrelic daemon v${NEWRELIC_VERSION}" | indent
	fi
else
	echo "Bundling newrelic daemon v${NEWRELIC_VERSION}" | indent
	echo ${NEWRELIC_URL} | indent
	download_url ${NEWRELIC_URL}
fi

tar xzf ${NEWRELIC_FILE} -C ${BUILD_DIR}/local

popd > /dev/null

# Phing
    install "Phing" $PHING_FILE $PHING_VERSION $PHING_URL ${BUILD_DIR}/${PHING_PATH}
    ln -s ${BUILD_DIR}/${PHING_PATH}/phing-${PHING_VERSION} ${BUILD_DIR}/${PHING_PATH}/phing

# NODE
    install "Node" $NODE_FILE $NODE_VERSION $NODE_URL ${BUILD_DIR}/${NODE_PATH}
            export PATH="$PATH:${BUILD_DIR}/${NODE_PATH}/bin"
            node -v

# NPM
    install "NPM" $NPM_FILE $NPM_VERSION $NPM_URL ${NPM_PATH}

# install compass
echo "-----> Installing Compass"
export GEM_HOME=$BUILD_DIR/.gem/ruby/1.9.1
PATH="$GEM_HOME/bin:$PATH"
HOME=$BUILD_DIR gem install compass --user-install --no-rdoc --no-ri

echo "-----> Installing SupervisorD"
pip install supervisor --pre

# Composer Installation
pushd ${BUILD_DIR} > /dev/null

if [ -f "composer.json" ]
then
	echo "-----> Installing dependencies using Composer"
	GIT_DIR_ORIG=${GIT_DIR}
	unset GIT_DIR

	if [ ! -f "composer.phar" ]
	then
		echo "Fetching composer.phar" | indent
		echo ${COMPOSER_URL} | indent
		download_url ${COMPOSER_URL}
	fi

	echo "configuring build-system php for composer" | indent
    # Php installation for bootstrap
    PHP_ROOT=${BUILD_DIR}/${PHP_PATH}
    PHP_INI=/app/${PHP_PATH}/php.ini
    EXEC_PHP=${BUILD_DIR}/${PHP_PATH}/bin/php

	# Copying php.ini to php temporary installation
	# It solves datezone problem, possible others
	cp $LP_DIR/conf/php.ini ${BUILD_DIR}/vendor/php/bin	

	# Deactivating plugins from php.ini (they won't be found)
	sed -i 's/extension=\(\w*\.so\)/;extension=\1/g' ${BUILD_DIR}/vendor/php/bin/php.ini

    # printing environment variables
    env 

    echo "extension_dir=${BUILD_DIR}/vendor/php/lib/php/extensions/no-debug-non-zts-20100525" >> ${BUILD_DIR}/vendor/php/bin/php.ini
    cat $LP_DIR/conf/etc.d/*.ini >> ${BUILD_DIR}/vendor/php/bin/php.ini

	if [ ! -r ${BUILD_DIR}/app/config/parameters.yml ]; then
		if [ -r ${BUILD_DIR}/app/config/parameters_prod.yml.erb ]; then
			echo "Configuring app" | indent
			erb ${BUILD_DIR}/app/config/parameters_prod.yml.erb > ${BUILD_DIR}/app/config/parameters.yml
		else

DEFAULT_PARAMETERS_FILE=`cat <<'DELIMETR'
parameters:
    database_driver:   pdo_mysql
    database_host:     127.0.0.1
    database_port:     ~
    database_name:     lpc
    database_user:     root
    database_password: root

    mailer_transport:  smtp
    mailer_host:       127.0.0.1
    mailer_user:       ~
    mailer_password:   ~

    locale:            en
    secret:            /TmH+UZZKy+s9KQXCau6GJiu58N8L+PS1Gvon	
DELIMETR`

			echo "${DEFAULT_PARAMETERS_FILE}" > ${BUILD_DIR}/app/config/parameters.yml
		fi
	fi

	# Debug info for php.ini
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php -r "phpinfo();" | grep 'Configuration File'

	# do the deed!
	echo "Running: php composer.phar install" | indent
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php composer.phar install -n --no-dev --optimize-autoloader | indent

	export GIT_DIR=${GIT_DIR_ORIG}
fi
popd > /dev/null

if [ -f "${BUILD_DIR}/app/assets/package.json" ]
then
	echo "-----> Installing assets build-system"
	pushd ${BUILD_DIR}/app/assets/ 
            run_npm "install --production --quiet" # "install production"
	popd  > /dev/null

	if [ -f "${BUILD_DIR}/app/assets/bower.json" ]
	then
		echo "-----> Executing bower"
		pushd ${BUILD_DIR}/app/assets/
            node_modules/bower/bin/bower install --quiet --config.storage.cache=${CACHE_DIR}/bower
		popd  > /dev/null
	fi

	if [ -f "${BUILD_DIR}/app/assets/Gruntfile.js" ]
	then
		echo "-----> Executing grunt ..."
		export LC_CTYPE="en_US.UTF-8" # fix locale for ruby (SASS)
		pushd ${BUILD_DIR}/app/assets/
            node_modules/grunt-cli/bin/grunt --env=prod
	        rm -r `ls | egrep -v 'dest|images|fonts|components'`
		popd  > /dev/null

		pushd ${BUILD_DIR}
			mkdir web/assets
	        mv app/assets/dest web/assets/dest
	        mv app/assets/images web/assets/images
	        mv app/assets/fonts web/assets/fonts
	        mv app/assets/components web/assets/components
		popd  > /dev/null
	fi
fi

echo "-----> Hacking less & node path"
            ln -s ${BUILD_DIR}/${NODE_PATH}/ /app/${NODE_PATH}
            export INCLUDE_PATH="${BUILD_DIR}/${NODE_PATH}/include"

if [ -f "${BUILD_DIR}/app/console" ]
then
	echo "-----> Detected Symfony2 app"
	echo "-----> Installing assets"
	# Sets the debug flag depending on Sf2 env (declared at the begeining of the file)
	export SF_DEBUG="--no-debug"
	export SF_ENV="prod"

	# Deploying assets - for some reason cd is neccesary
	cd ${BUILD_DIR}
	echo "-------> Running: app/console assets:install --env=${SF_ENV}"
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php ${BUILD_DIR}/app/console assets:install --env=${SF_ENV}
	echo "-------> Running: app/console assetic:dump ${SF_DEBUG} --env=${SF_ENV}"
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php ${BUILD_DIR}/app/console assetic:dump ${SF_DEBUG} --env=${SF_ENV}

	echo "-------> Clearing cache again: app/console cache:clear ${SF_DEBUG} --env=${SF_ENV} --no-warmup"
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php ${BUILD_DIR}/app/console cache:clear ${SF_DEBUG} --env=${SF_ENV} --no-warmup
fi

# Config files
echo "-----> Copying config files"
cp $LP_DIR/conf/php-fpm.conf ${BUILD_DIR}/vendor/php/etc/php-fpm.conf
mkdir -p ${BUILD_DIR}/web/server
cp ${BUILD_DIR}/vendor/php/php/fpm/status.html ${BUILD_DIR}/web/server/status.html
if [ -f "${BUILD_DIR}/vendor/php/bin/php.ini" ]
then
	rm ${BUILD_DIR}/vendor/php/bin/php.ini # remove temporary php.ini file
fi
if [ -f "${BUILD_DIR}/app/config/parameters.yml" ]
then
	rm ${BUILD_DIR}/app/config/parameters.yml # remove generated parameters.yml. Needs to be regeneated at bootup. 
fi
cp $LP_DIR/conf/php.ini ${BUILD_DIR}/vendor/php/php.ini
cp -a $LP_DIR/conf/etc.d ${BUILD_DIR}/vendor/php/
cp $LP_DIR/conf/nginx.conf.erb ${BUILD_DIR}/vendor/nginx/conf/nginx.conf.erb
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/
#erb $LP_DIR/conf/nginx.conf.erb > ${BUILD_DIR}/vendor/nginx/conf/nginx.conf


echo "-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting nginx"

# Symfony2 database detection
if [ -r /app/app/config/parameters_prod.yml.erb ]; then
	erb /app/app/config/parameters_prod.yml.erb > /app/app/config/parameters.yml
fi

# Override config files if provided in app.
if [ -d /app/conf ]; then

	mkdir -p /app/conf/nginx.d

	if [ -d /app/conf/etc.d ]; then
		cp -f /app/conf/etc.d/* /app/vendor/php/etc.d/
	fi

	if [ -r /app/conf/php-fpm.conf ]; then
		cp -f /app/conf/php-fpm.conf /app/vendor/php/etc/php-fpm.conf
	fi

	if [ -r /app/conf/php.ini ]; then
		cp -f /app/conf/php.ini /app/vendor/php/php.ini
	fi

	if [ -r /app/conf/nginx.conf.erb ]; then
		cp -f /app/conf/nginx.conf.erb /app/vendor/nginx/conf/nginx.conf.erb
	fi

fi

# Set correct port variable.
erb /app/vendor/nginx/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf

if [ -d /app/conf/nginx.d ]; then
	# Parse .erb into .conf.
	for f in /app/conf/nginx.d/*.erb
	do
		if [ -r "\${f}" ];
		then
			erb "\${f}" > "\${f}.conf"
		fi
	done
fi

# Set NEWRELIC key
if [ "\${NEW_RELIC_LICENSE_KEY}" ]; then
	if [ -w "/app/vendor/php/etc.d/04_newrelic.ini" ]; then
		echo "Setting NEWRELIC license from ENV (\${NEW_RELIC_LICENSE_KEY}) ... "
		sed -i "s|REPLACE_WITH_REAL_KEY|\${NEW_RELIC_LICENSE_KEY}|g" /app/vendor/php/etc.d/04_newrelic.ini
	else
		echo "No writable 04_newrelic.ini config file found. Skipping new relic key from ENV ..."
	fi
else
	if [ -r /app/vendor/php/etc.d/04_newrelic.ini ]; then
		echo "No new Relic license found, disabling New Relic extension ..."
		echo "-->   Please set NEW_RELIC_LICENSE_KEY config variable   <--"
		rm /app/vendor/php/etc.d/04_newrelic.ini
	fi
fi

# Preserve current php-fpm.conf so that env list does
# not go out of hand across restarts.
if [ -r /app/vendor/php/etc/php-fpm.conf.current ]; then
	cp -f /app/vendor/php/etc/php-fpm.conf.current /app/vendor/php/etc/php-fpm.conf
else
	cp -f /app/vendor/php/etc/php-fpm.conf /app/vendor/php/etc/php-fpm.conf.current
fi

# Expose Heroku config vars to PHP-FPM processes
for var in \`env | cut -f1 -d=\`; do
	echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

# Warmup Cache again because of changing pathes between build and live systems
# Currently hardcoded to prod environment. Has to be adjusted. 
#cd /app/web
#../vendor/php/bin/php app/console assets:install --env=prod
#../vendor/php/bin/php app/console assetic:dump --no-debug --env=prod
#cd -

touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log /app/vendor/php/var/log/php-fpm.log /app/vendor/php/var/log/php-errors.log /app/local/var/log/newrelic/newrelic-daemon.log /app/local/var/log/newrelic/php_agent.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
(tail -f -n 0 /app/vendor/nginx/logs/*.log /app/vendor/php/var/log/*.log /app/local/var/log/newrelic/*.log &)

if [ "\${NEW_RELIC_LICENSE_KEY}" -a ! -f /app/local/NEWRELIC_VERSION ]; then
	/app/local/bin/newrelic-daemon -c /app/local/etc/newrelic.cfg -d error
fi
/app/vendor/php/sbin/php-fpm
/app/vendor/nginx/sbin/nginx

export PYTHONPATH=\${PYTHONPATH}:/app/vendor/setuptools/lib/python2.7/site-packages/
export PHING_HOME="$BUILD_DIR/$PHING_PATH"

EOF
chmod +x boot.sh

cat >>bootWorker.sh <<EOF
#!/usr/bin/env bash

echo "Booting worker"

# Symfony2 database detection
if [ -r /app/app/config/parameters_prod.yml.erb ]; then
	erb /app/app/config/parameters_prod.yml.erb > /app/app/config/parameters.yml
fi

if [ -f "/app/app/console" ]
then
	echo "-----> Detected Symfony2 app"
	echo "-------> Cache warmup: app/console cache:clear --no-debug --env=prod"

	app/console cache:clear --no-debug --env=prod
fi

if [ -r /app/app/config/supervisord.conf ]; then
	echo "Found SupervisorD config"
	echo "Preparing logfiles ..."

	# Get all logfiles from supervisorD config
	logfiles="`cat app/config/supervisord.conf | grep '_logfile' | awk 'BEGIN { FS = "=" } ; {print $2}'`"

	#Set the field separator to new line
	IFS=$'\n'

	#Try to iterate over each line
	mkdir -p /app/log/supervisor
	for logfile in $logfiles
	do
        mkfifo $logfile
	done
	(tail -f -n 0 /app/log/supervisor/*.log &)

	echo "Starting up supervisor.d ..."
	export PYTHONPATH=\${PYTHONPATH}:/app/vendor/setuptools/lib/python2.7/site-packages/
	mkdir -p /app/tmp

	python vendor/supervisord/supervisor-3.0/build/lib/supervisor/supervisord.py --configuration /app/app/config/supervisord.conf --nodaemon
else
	echo "No supervisor.d config found. (Place it inside: /app/config/supervisord.conf)"
fi
EOF
chmod +x bootWorker.sh


echo "-----> Preparing phing during compile"
export PHING_HOME="$BUILD_DIR/$PHING_PATH"

if [ "${NEW_RELIC_LICENSE_KEY}" ]; then
	if [ "${NEW_RELIC_API_KEY}" ]; then
		if [ "${NEW_RELIC_APPLICATION_ID}" ]; then
			echo "-----> Notifying New Relic about new deploy ..."
			curl -H "x-api-key:${NEW_RELIC_API_KEY}" -d "deployment[application_id]=${NEW_RELIC_APPLICATION_ID}" https://rpm.newrelic.com/deployments.xml --silent > /dev/null
		else
			echo "-----> New Relic Application-ID not found. Please configure NEW_RELIC_APPLICATION_ID ..."
		fi
	else
		echo "-----> You could send Deploy-Events to New Relic automatically. Please configure NEW_RELIC_API_KEY and NEW_RELIC_APPLICATION_ID ..."
	fi
fi

echo "-----> Done with compile"
