<%
  allow_access_rules = "";
  if (['1', 'on', 'true'].index(ENV['IP_RESTRICTION'])) 
    ENV.each_pair {|key, value| 
      if (key.kind_of?(String) && key.match(/^IP_RESTRICTION_ALLOW_(\d+)$/))
        allow_access_rules += "allow " + ENV[key] + ";\n"
      end
    } 
    allow_access_rules += "deny all;\n"
  end
%>

# Heroku dynos have 4 cores.
worker_processes 4;
daemon off;

events {
  use epoll;
  accept_mutex on;
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  server_tokens off;
  keepalive_timeout 65;
  gzip on;
  gzip_min_length  1100;
  gzip_buffers  4 32k;
  gzip_types    text/plain application/x-javascript text/xml text/css;
  gzip_vary on;
  gzip_comp_level 4;
  access_log off;
  client_max_body_size 10M;
  proxy_max_temp_file_size 0;
  #fastcgi_max_temp_file_size 0;
  limit_conn_zone $binary_remote_addr zone=phplimit:1m; # define a limit bucket for PHP-FPM
  # don't use server listen port in redirects.
  port_in_redirect off;
  limit_req_status 429;
  limit_conn_status 429;

  set_real_ip_from    10.0.0.0/8;
  real_ip_header      X-Forwarded-For;

  upstream php_fpm {
    server unix:/tmp/php-fpm.socket;
  }

  server {
    listen <%= ENV['PORT'] %>;
    server_name localhost;

    root /app/web;
    index app.php index.php index.html index.htm;

    # Some basic cache-control for static files to be sent to the browser
    # If the request path starts with "/image/" this rule will not match because in this case we want the request to hit
    # our application so that the application can handle CDN stuff
    location ~* ^(?!(\/app\.php)?(\/image\/)).*\.(?:ico|css|js|gif|jpeg|jpg|png)$ {
      expires max;
      add_header Pragma public;
      add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    }

    # Deny hidden files (.htaccess, .htpasswd, .DS_Store).
    location ~ /\. {
      deny all;
      access_log off;
      log_not_found off;
    }

    # Deny /favicon.ico
    location = /favicon.ico {
      access_log off;
      log_not_found off;
    }

    # Deny /robots.txt
    location = /robots.txt {
      allow all;
      log_not_found off;
      access_log off;
    }

    # Send correct headers for webfonts
    location ~* \.(eot|otf|ttf|woff)$ {
        add_header Access-Control-Allow-Origin *;
    }

    # Status. /status.html uses /status
#    location ~ ^/(status|ping)$ {
#      include /app/vendor/nginx/conf/fastcgi_params;
#      fastcgi_param HTTPS on; # force SSL
#      fastcgi_pass php_fpm;
#      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#    }

    location /server-status {
      stub_status on;
      access_log off;
    }

    # strip app.php/ prefix if it is present
    rewrite ^/app\.php/?(.*)$ /$1 permanent;

    set $https_redirect 0;
    if ($http_x_forwarded_proto = "http") {
      set $https_redirect 1;
    }

    set $landing_page 1;
    if ($http_cookie ~* "passedLp" ) {
      set $landing_page 0;
    }
    if ($arg_lp = "1") {
      set $landing_page 0;
    }

    if ($https_redirect) {
          rewrite ^ https://$host$request_uri? permanent;
    }

    if ($landing_page = 1) {
      rewrite ^/$ /landingPage.html last;
    }

    location / {
      <%= allow_access_rules %>

      index app.php;
      try_files $uri @rewriteapp;
    }

    location @rewriteapp {
      rewrite ^(.*)$ /app.php$1 last;
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    location ~ ^/(app|app_dev)\.php(/|$) {
      <%= allow_access_rules %>
      limit_conn phplimit 5; # limit to 5 concurrent users to PHP per IP.
      fastcgi_pass  php_fpm;
      fastcgi_split_path_info ^(.+\.php)(/.*)$;
      include fastcgi_params;
      fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
      fastcgi_param  HTTPS              off;
    }


    location ~ .*\.php$ {
      <%= allow_access_rules %>
      try_files $uri =404;
      limit_conn phplimit 5; # limit to 5 concurrent users to PHP per IP.
      include /app/vendor/nginx/conf/fastcgi_params;
      fastcgi_param HTTPS on; # force SSL
      fastcgi_pass php_fpm;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
  }
}
